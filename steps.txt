- install next-auth (https://next-auth.js.org/configuration/options)
npm i next-auth
- create src/app/api/auth/[...nextauth]/route.ts
- creating options.ts (https://next-auth.js.org/configuration/options) Docs contain infromation on options, including methods of authentication. Default is JWE(JWT Encrypted). Default pages such as SignIn, SignOut, etc., can be customized otherwise are provided by NextAuth
- generating secret and save in .env.local as NEXTAUTH_SECRET
openssl rand -base64 32
- setup credentials providers (https://next-auth.js.org/configuration/providers/credentials)
- setting up GitHub: github -> settings -> developer settings -> OAuth -> created new app
- setting up Credentials (https://next-auth.js.org/providers/credentials). In this example the credentials are hardcoded. Need a source of user data(DB)
- setting up Facebook (TODO make it happen somehow)
    Middleware
- creating src/middleware.ts (invokes next-auth on every route, according to matcher rules i.e. protected routes)
    Frontend
- adding UserCard component src/app/components/UserCard.tsx
- editing src/app/page.tsx to display UserCard if authenticated
- creating auth context src/app/context/AuthProvider.tsx
- wrapping root layout in AuthProvider src/app/layout.tsx
- creating server page src/app/server/page.tsx (it uses nextauth to authenticate on the server and then redirects to the initial route)
- creating protected by middleware page src/app/extra/page.tsx (to demonstrate that despite not using nextuath it still does require authentication through middleware)
- adding github Images support in next.config.js (without it cannot access avatars.githubusercontent.com)
- adding client page src/app/client/page.tsx (it is best to use auth data on server pages and import client pages. This is just an example of a client page with auth)
- added signOut to the Navbar to avoid confirm popup and reroute. src/app/components/NavbarSignOutButton.tsx (it's a client component use in server Navbar)
    Facebook
- setting up keys for the FB https://developers.facebook.com/apps. Create test app. Get keys.
- configure Products -> Facebook Login -> Configure -> Settings -> Deauthorize URL (https://localhost:3000/api/auth/callback/facebook)
- configure NextImage for FB CDN in next.config.js

    Database
- creating Docket Postgresql DB
docker run --rm -p 5432:5432 -e POSTGRES_HOST_AUTH_METHOD=trust postgres
- installing Prisma for development only
npm i -D prisma
- installing prisma client
npm i @prisma/client
- initialize Prisma
npm prisma init
- changing .env DATABASE_URL to connect to our DB
- creating prisma migration
npx prisma migrate dev --name init
(NOTE Prisma generates Type Definitions inside node_modules, meaning they need to be regenerated either post installation, or as a part of the build process)
- adding prisma Type Definitions regeneration to the build script in package.json 
    "scripts": {
        "build": "prisma generate && next build",
    },

    Adding password encryption
- install bcrypt and bcrypt types
npm i bcrypt
npm i -D @types/bcrypt

    Seeding the DB
- install ts-node, this allows to execute a node script written in TS
npm i -D ts-node
- creating prisma seed command (https://www.prisma.io/docs/guides/migrate/seed-database#how-to-seed-your-database-in-prisma) (NOTE NextJS requires additional compile options)
- creating prisma seed file ./prisma/seed.ts
- running the seed command
npx prisma db seed
- creating a singleton for Prisma connection, i.e. preventing hot reloading from creating new instances of Prisma Client (https://www.prisma.io/docs/guides/performance-and-optimization/connection-management). src/lib/prisma.ts. All further imports of Prisma will be from this file.

    Adding custom keys to the NextAuth options (session, jwt) (https://next-auth.js.org/configuration/options)
- adding session and jwt options src/app/api/auth/[...nextauth]/options.ts (demonstrating custom properties in the jwt)(NOTE custom properties in jwt passed inside of the cookie therefore must not exceed certain size)

    Module augmentation (https://next-auth.js.org/getting-started/typescript#module-augmentation)
- creating ./next-auth.d.ts file with extended types for next-auth

    Protected routes (can be applied on client, server, or as middleware. Middleware is preferred)
- client protected routes src/app/client/page.tsx (NOTE Client pages will have a delay fetching auth data. Need to address loading. Generally not a good idea to protect routes on the client)
- server protected routes src/app/server/page.tsx
- middleware src/middleware.ts - defining protected routes with a matcher. If no session data found automatically redirects to the signin route with callbackUrl of the protected page
- protected API route src/app/api/test/route.ts - return 401 on get request if no session data

    Role-based access
- adding profile - src/app/api/auth/[...nextauth]/options.ts
- modifying middleware src/middleware.ts (https://next-auth.js.org/configuration/nextjs#advanced-usage)
- creating tiered access based on the role name in pages. - src/app/server/page.tsx (NOTE this is an example, preferable way is to use middleware)
- tiered access with middleware src/middleware.ts 

TODO Tie provider session with roles in DB. add user registration(email verification)/deletion/passchange(modification?).